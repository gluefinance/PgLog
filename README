This tools is useful if you need advanced analysis of the log files generated by PostgreSQL.

* Runs in cronjob every minute

* Parses every log line against user-defined patterns

* Incremental processing, continues on the last processed row per log file

* Customize actions per pattern
    - Update total and daily statistics (PgLogPatterns and PgLogStats)
        - Last spotted log entry (total)
        - Number of log entries per day
        - Last spotted log entry per day
    - Store log row to PgLogRows or (default is to discard the log row, but update statistics)
    - Send SMS (requires external SMS service)

* Keep statistics on how often different types of log messages/errors occur



Potential use-cases:

* Works like a SPAM filter for your PostgreSQL log files
    - keep rows of interest, discard the rest, but at least update statistics which won't eat disk space

* Detect abnormal frequencies of certain types of log messages
    - Early-warning indicator of bug or other problem

* Define patterns for different types of log messages
    - More fine-grained logging than DEBUG, NOTICE, LOG, WARNING, ERROR, etc
    - Individual actions per pattern
    - Log specific messages of importance thrown by your Stored Procedures

* Use the power of SQL to analyze your log files
    - UNIX tools such as grep/awk/tail not always suitable to analyze log files
    - Add your own indexes on different columns to provide fast lookups on what ever might be interesting
    - Keep interesting log entries for ever

* Track down bugs live in production
    - Default error messages thrown by PostgreSQL upon deadlocks/race conditions seldom enough to understand the cause of the bug
    - Deadlocks/race conditions sometimes difficult to reproduce in local test environment
    - Add customized RAISE NOTICE with extra information per transaction to help bring clarity to the situation
    - Let PgLog catch the messages
    - Narrow down your select from PgLogRows to the conflicting transactions around the second when the deadlock occurred
